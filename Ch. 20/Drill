#include <iostream>

#include <array>
#include <list>
#include <vector>

#include <algorithm>

template<typename Iter1, typename Iter2>
// requires Input_iterator<Iter1>() && Output_iterator<Iter2>()
Iter2 Copy(Iter1 f1, Iter1 e1, Iter2 f2)
{
	while (f1 != e1)
	{
		*f2 = *f1;
		f2++;
		f1++;
	}
	return f2;
}

int main()
{
	int a[10] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	std::vector<int> v { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	std::list <int> ls{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

	int b[]{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	std::vector<int> v2 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	std::list <int> ls2 { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

	for (int i{}; i < 10; i++) a[i] += 2;
	for (auto p = v.begin(); p != v.end(); p++) *p += 3;
	for (auto p = ls.begin(); p != ls.end(); p++) *p += 5;

	Copy(v.begin() + 4, v.end(), v2.begin());

	Copy(a, a + 10, v2.begin());
	Copy(ls.begin(), ls.end(), b);
	std::vector<int>::iterator f = find(v.begin(), v.end(), 8);
	std::cout << f - v.begin();

}
